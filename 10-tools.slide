Tools, Tips and Good Practices
22.12.2015

fmi@golang.bg
http://fmi.golang.bg/
@fmi_golang

* Но преди това

- Ще има ново домашно тази вечер със срок до нова година
- Напомняме, че 24.12.2015 е крайният срок за одобряване на идеи за проект
- Ако нямате *одобрена* идея до тогава, ще се видим през септември 2016
- На 19.01.2016 (вторник) ще има частична защита на проектите
- Повече детайли за нея ще пуснем в новина
- Ориентировъчни дати за пълната защита и втория тест: 20.02.2016 и 21.02.2016


* Въпроси за "мъфини"

* Как се извиква C код в Go програми?

- Пишем C кода като коментар преди `import`"C"`
- Там може да имаме и неща като `#include`<stdlib.h>`
- Извикваме функциите с `C.<нещо>`
- Няма истински пакет `C` в стандартната библиотека

* Как се прави адресна аритметика в Go?

- С `unsafe.Pointer`
- Само при крайна необходимост

* Как може да се debug-ва и променя работата на RUNTIME-а

- Чрез environmental variables (`GODEBUG`, `GOGC`, `GOMAXPROCS` и други)
- С извикване на функции от пакета `runtime`


* И по същество...

* The Go Toolkit

- Go има богата екосистема с инструменти (както вградени, така и външни)
- Едно от най-ценните неща в езика
- Лесно се пишат нови инструменти: има пакет `go`, съдържащ пакети `ast`, `parser`, `build` и др.

Вече сме говорили за някои от вградените инструменти:

- `go`build` , `go`run` , `go`install` и `go`get`
- `go`test`
- `go`doc`
- `go`fmt`
- Останалите може да видите чрез `go`-h`
- Допълнителни официални инструменти [[https://godoc.org/golang.org/x/tools]]

* Test coverage

- Вграден инструмент от Go 1.5
- Можем да видим колко от кода ни се тества:

    go test -cover

- Ако искаме да знаем и кои части от кода са покрити от тестове:

    go test -coverprofile <filename>
    go tool cover -html <coverage_file> -o <html_result>

- С `covermode` опцията може да определим как се смята покритието. Възможните опции са set,count и atomic

* Примерен HTML output

.image assets/code-coverage-html.png _ 1000

* Race condition detection

- Go идва с напълно интегриран в toolchain-а race condition detector
- Runtime-а може да проверява за несинхронизиран достъп до споделени променливи и да се оплаква

    $ go test -race mypkg    // test the package
    $ go run -race mysrc.go  // compile and run the program
    $ go build -race mycmd   // build the command
    $ go install -race mypkg // install the package

- Обикновено се използва при тестовете, тъй като хаби доста CPU и памет
- Повече информация: [[https://blog.golang.org/race-detector]]

* goimports

 go get -u golang.org/x/tools/cmd/goimports

- gofmt replacement, който също автоматично ви оправя import-ите
- Маха ненужни import-и и добавя липсващи

 goimports -w .

* go fix

Спомняте ли си как ви казахме че след версия 1.0 авторите са обещали, че каквото работи на 1.x ще работи на 1.y, където x < y ?

Е да ама ... понякога се налага да се променят основни API-та.

Ако след ъпдейт на go не ви се компилира проекта, можете просто да рънете:

 go fix .

Все пак понякога се правят по специални промени, за които това няма да помогне.


* go vet

Статичен анализатор на go код, който може и да ви спести доста главоболия. Проверява за често срещани грешки във вашия код и се оплаква, ако ги намери.

Някои поддържани проверки:

- грешни аргументи на методи от вида на Printf.
- грешна сигнатура на някои често имплементирани методи от стандартните интерфейси.
- грешни тагове на полета в struct.
- недостижим код.
- чести грешки в ползване на sync/atomic.
- shadowed variables
- и други.


* golint

"Официален" linter за Go от Google. Показва стилистични грешки.

    go get -u github.com/golang/lint/golint

И го викаме с : (drum rolls)

    golint .

или

    golint ./...

* Други linter-и

gometalinter обединява и унифицира много различни вградени и външни инструменти за анализ на кода

    go get -u github.com/alecthomas/gometalinter
    gometalinter --install --update

Включва:

- Вече споменатите `go`fmt` , `go`vet` , `golint` и `goimports`
- [[https://golang.org/x/tools/cmd/gotype][gotype]] - Синтактичен и семантичен анализ, подобен на Go компилатора
- [[https://github.com/remyoudompheng/go-misc/tree/master/deadcode][deadcode]] - Намира неизползван код
- [[https://github.com/alecthomas/gocyclo][gocyclo]] - Изчислява [[https://en.wikipedia.org/wiki/Cyclomatic_complexity][цикломатичната сложност]] на функциите
- [[https://github.com/opennota/check][varcheck]] - Намира неизползвани глобални променливи и константи
- [[https://github.com/opennota/check][structcheck]] - Намира неизползвани полета на структури

* ...

- [[https://github.com/opennota/check][aligncheck]] - Предпазва от неоптимално align-нати структури
- [[https://github.com/kisielk/errcheck][errcheck]] - Подсигурява, че error return стойностите се проверяват
- [[https://github.com/mibk/dupl][dupl]] - Проверява за повтарящ се код
- [[https://github.com/gordonklaus/ineffassign/blob/master/list][ineffassign]] - Проверява когато присвоявания към съществуващи променливи не се използват


Прекалено тежко е да се се пуска на всеки filesave, за разлика от `gofmt`, `goimports` или `golint`.

Безценен е обаче като метрика и част от CI процес.

* gorename

Позволява прецизно type-safe преименуване на неща в кода

    go get -u golang.org/x/tools/cmd/gorename

С даден файл

    gorename -from filename.go::NameOfSomething -to NewNameOfSomething

само разпознава какво е Something и го преименува в правилните файлове.

Или

    gorename -from '"site.com/package/path".structName[.MethodName]' -to NewNameOfSomething

Преименува дадения идентификатор по даден пакет и идентификатор.

Навярно няма да го ползвате ръчно.

* Oracle

    go get -u golang.org/x/tools/cmd/oracle

Вие питате, а той ви отговаря  на въпроси относно кода ви.

- implements
- describe
- callees
- callers

Не се ползва ръчно - или поне не лесно.

[[http://golang.org/s/oracle-user-manual]]

* pprof

В Go има вграден profiler, който се използва така:

    import _ "net/http/pprof"

И ако нямате HTTP сървър в програмата, трябва да дoбавите поне:

    go func() {
        http.ListenAndServe("localhost:6060", nil)
    }()

След това може да отидете на адреса и да разглеждате информация за heap-а, CPU usage, execution traces, горутини и др.

Може да се използва и вградения command-line tool:

    go tool pprof http://localhost:6060/debug/pprof/heap

Повече информация има [[https://blog.golang.org/profiling-go-programs][тук]] и [[https://golang.org/pkg/net/http/pprof/][тук]]


* build tags (restrictions)

В go има едно нещо наречено build tag-ове или build restrictions

Представлят подобен коментар някъде в началото на файла (още преди package):

    // +build tagname

Сигнализират на компилатора при какви обстоятелства да компилира или да не компилира даден файл

 // +build linux
 // +build !386

казва само под linux, но не под 386

Може да подаваме наши тагове с:

    go build -tag tagname

* go generate

Mожете да укажeте, че искате дадена друга команда да бъде изпълнена върху кода. Use cases:

- [[https://github.com/jteeuwen/go-bindata][go-bindata]] - ембедване на бинарни файлове в go код :)
- [[https://github.com/clipperhouse/gen][gen]] - code generator, с който може да се постигне нещо като generics
- [[https://golang.org/cmd/yacc/][go yacc]] - yet another compiler compiler (Go edition)
- [[https://godoc.org/golang.org/x/tools/cmd/stringer][stringer]] - автоматично генерира pretty-print `String()` методи на константи
- много други, както възможност и вие сами да си напишете

Казвате какво и как искате да се пусне, като в началото на някой .go файл слагате:

    //go:generate command args...

И след това извиквате

    go generate ./...


* Интеграция с редактори

Повечето tool-ве описане до тук са писани с идеята, че ще бъдат интегрирани или поне с възможността да бъдат интегрирани в един или друг текстов редактор и цялостно IDE.

- gocode и oracle са добри примери за това.
- между другото gocode е демон (тоест върви фоново) за context aware autocompletion.

Общото между двата и причината да не ви показваме как се ползват ръчно е, че и двата работят с byte offset, а не с номера на редове.


* Command-line аргументи

- Подадените от терминал аргументи се намират в `os.Args`
- Но Обикновенно искаме да имаме флагове - `flag` ту дъ рескю

 import "flag"

 var stringVar string

 func init() {
     flag.StringVar(&stringVar,  "paramName", "help message")
 }

 func main() {
     flag.Parse()
     // do something with stringVar
 }


* Външни услуги

Има много външни услуги (често безплатни), които позволяват лесно и автоматизирано build-ване, тестване, показване на code coverage и др.

Примери:

- [[https://travis-ci.org]]
- [[https://circleci.com]]
- [[http://wercker.com]]
- [[https://coveralls.io]]
- [[https://about.gitlab.com/gitlab-ci]]
- и много други...
