Tools
20.11.2014

fmi@golang.bg
http://fmi.golang.bg/
@fmi_golang

* Интересни неща в go toolkit-а

* Test coverage

 go get golang.org/x/tools/cmd/cover

- Можем да видим колко от кода ни се тества:

 go test -cover

- Ако искаме да знаем и кои части от кода:

 go test -coverprofile <filename> 
 go tool cover -html <coverage_file>

* goimports

 go get golang.org/x/tools/cmd/goimports

- gofmt който автоматично ви оправя import-ите (принципно)

 goimports -w .

* go fix

Спомняте ли си как ви казахме че след версия 1.0 авторите са обещали, че каквото работи на 1.x ще работи на 1.y, където x < y ?

Е да ама ... понякога се налага да се променят основни API-та. До тук има два(2) фикса за от 1.0 насам. 

И двата са за използване на ненаимeновани инициализации на структове 

 Student{12345, "Пешо Пешов"}

вместо 

 Student{faculty_number: 12345, name: "Пешо Пешов"}

Ако след ъпдейт на go не ви се компилира проекта, можете просто да рънете:

 go fix .

Все пак понякога се правят по специални промени, за които това няма да помогне.


* go vet 

Статичен анализатор на go код, който може и да ви спести малко главоболия. 

Някои поддържани проверки: 

- грешни аргументи на методи от вида на Printf.
- грешна сигнатура на някои често имплементирани методи от стандартните интерфейси.
- грешни тагове на полета в struct.
- недостижим код.
- чести грешки в ползване на sync/atomic.
- и други.

* golint

Lint за go от google. 

 go get github.com/golang/lint/golint

И го викаме с : (drum rolls)

 golint .

* gorename

 go get golang.org/x/tools/cmd/gorename

С даден файл

 gorename -from filename.go::NameOfSomething -to NewNameOfSomething

само разпознава какво е Something и го преименува в правилните файлове.

Или

 gorename -from '"site.com/package/path".structName[.MethodName]' -to NewNameOfSomething

Преименува дадения идентификатор по даден пакет и идентификатор.

Навярно няма да го ползвате ръчно.

* Oracle

Вие питате, а той ви отговаря  на въпроси относно кода ви.

- implements
- describe
- callees
- callers

Не се ползва ръчно - или поне не лесно.

* build tags (restrictions)

- в go има едно нещо наречено build tag-ове или build restrictions
- представляват коментар стил

 // +build tagname

някъде в началото на файла още преди package

сигнализират на компилатора при какви обстоятелства да компилира или да не компилира даден файл

 // +build linux
 // +build !386

казва само под linux , но не под 386

- може да подавате ваши си тагове с
  go build -tag tagname

* go generate (new in 1.4)

- с go generate (ще) можете да кажeте че искате дадена друга команда да бъде изпълнена върху кода.

Kъм момента списъка от команди включва:

- go-bindata - ембедване на бинарни файлове в go код :).
- gotemplate (след малко).
- go yacc - yet another compiler compiler (Go edition).
- други - главно за генериране на binding-и към дадени протоколи.
- 1.4 още не излязъл.
- казвате какво и как искате да се рънне с

 //go:generate command args...

в началото на някой go файл който ще се компилира

* go template

- Не от екипа на go, поредната итерация на оправяне на "проблема" go няма generics.
- работи с go generate.
- ограничен е, но върши работа като за правене на generic set имплементация.
- кой иска първото му домашно да стане generic ?

* Интеграция с редактори

Повечето tool-ве описане до тук са писани с идеята че ще бъдат интегрирани или поне със възможността да бъдат интегрирани във един или друг текстов редактор и цялостно IDE.

- gocode и oracle са добри примери за това.
- между другото gocode е демон (тоест върви фоново) за context aware autocompletion.

Общото между двата и причината да не ви показваме как се ползват ръчно е че и двата работят със byte offset а не със номера на редове.


* Command-line аргументи

- Подадените от терминал аргументи се намират в `os.Args`
- Но Обикновенно искаме да имаме флагое - `flag` ту дъ рескю
 
 import "flag"

 var stringVar string

 func init() {
     flag.StringVar(&stringVar,  "paramName", "help message")
 }

 func main() {
     flag.Parse()
     // do something with stringVar
 }
